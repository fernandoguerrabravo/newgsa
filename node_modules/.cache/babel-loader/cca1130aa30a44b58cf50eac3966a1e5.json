{"ast":null,"code":"var _jsxFileName = \"/Users/fernandoguerra/Documents/gsaultimo/src/contexts/FirebaseContext.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { createContext, useEffect, useReducer } from 'react'; // third-party\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth'; // action - state management\n\nimport { LOGIN, LOGOUT } from 'store/actions';\nimport accountReducer from 'store/accountReducer'; // project imports\n\nimport Loader from 'ui-component/Loader';\nimport config from 'config'; // firebase initialize\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config.firebase);\n} // const\n\n\nconst initialState = {\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n}; // ==============================|| FIREBASE CONTEXT & PROVIDER ||============================== //\n\nconst FirebaseContext = /*#__PURE__*/createContext(null);\nexport const FirebaseProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(accountReducer, initialState);\n  useEffect(() => firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      dispatch({\n        type: LOGIN,\n        payload: {\n          isLoggedIn: true,\n          user: {\n            id: user.uid,\n            email: user.email,\n            name: user.displayName || 'Betty'\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: LOGOUT\n      });\n    }\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [dispatch]);\n\n  const firebaseEmailPasswordSignIn = (email, password) => firebase.auth().signInWithEmailAndPassword(email, password);\n\n  const firebaseGoogleSignIn = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth().signInWithPopup(provider);\n  };\n\n  const firebaseRegister = async (email, password) => firebase.auth().createUserWithEmailAndPassword(email, password);\n\n  const logout = () => firebase.auth().signOut();\n\n  const resetPassword = async email => {\n    await firebase.auth().sendPasswordResetEmail(email);\n  };\n\n  const updateProfile = () => {};\n\n  if (state.isInitialized !== undefined && !state.isInitialized) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FirebaseContext.Provider, {\n    value: { ...state,\n      firebaseRegister,\n      firebaseEmailPasswordSignIn,\n      login: () => {},\n      firebaseGoogleSignIn,\n      logout,\n      resetPassword,\n      updateProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FirebaseProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = FirebaseProvider;\nFirebaseProvider.propTypes = {\n  children: PropTypes.node\n};\nexport default FirebaseContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseProvider\");","map":{"version":3,"sources":["/Users/fernandoguerra/Documents/gsaultimo/src/contexts/FirebaseContext.js"],"names":["PropTypes","createContext","useEffect","useReducer","firebase","LOGIN","LOGOUT","accountReducer","Loader","config","apps","length","initializeApp","initialState","isLoggedIn","isInitialized","user","FirebaseContext","FirebaseProvider","children","state","dispatch","auth","onAuthStateChanged","type","payload","id","uid","email","name","displayName","firebaseEmailPasswordSignIn","password","signInWithEmailAndPassword","firebaseGoogleSignIn","provider","GoogleAuthProvider","signInWithPopup","firebaseRegister","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateProfile","undefined","login","propTypes","node"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { createContext, useEffect, useReducer } from 'react';\r\n\r\n// third-party\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\n// action - state management\r\nimport { LOGIN, LOGOUT } from 'store/actions';\r\nimport accountReducer from 'store/accountReducer';\r\n\r\n// project imports\r\nimport Loader from 'ui-component/Loader';\r\nimport config from 'config';\r\n\r\n// firebase initialize\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(config.firebase);\r\n}\r\n\r\n// const\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isInitialized: false,\r\n    user: null\r\n};\r\n\r\n// ==============================|| FIREBASE CONTEXT & PROVIDER ||============================== //\r\n\r\nconst FirebaseContext = createContext(null);\r\n\r\nexport const FirebaseProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(accountReducer, initialState);\r\n\r\n    useEffect(\r\n        () =>\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    dispatch({\r\n                        type: LOGIN,\r\n                        payload: {\r\n                            isLoggedIn: true,\r\n                            user: {\r\n                                id: user.uid,\r\n                                email: user.email,\r\n                                name: user.displayName || 'Betty'\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: LOGOUT\r\n                    });\r\n                }\r\n            }),\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [dispatch]\r\n    );\r\n\r\n    const firebaseEmailPasswordSignIn = (email, password) => firebase.auth().signInWithEmailAndPassword(email, password);\r\n\r\n    const firebaseGoogleSignIn = () => {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        return firebase.auth().signInWithPopup(provider);\r\n    };\r\n\r\n    const firebaseRegister = async (email, password) => firebase.auth().createUserWithEmailAndPassword(email, password);\r\n\r\n    const logout = () => firebase.auth().signOut();\r\n\r\n    const resetPassword = async (email) => {\r\n        await firebase.auth().sendPasswordResetEmail(email);\r\n    };\r\n\r\n    const updateProfile = () => {};\r\n    if (state.isInitialized !== undefined && !state.isInitialized) {\r\n        return <Loader />;\r\n    }\r\n\r\n    return (\r\n        <FirebaseContext.Provider\r\n            value={{\r\n                ...state,\r\n                firebaseRegister,\r\n                firebaseEmailPasswordSignIn,\r\n                login: () => {},\r\n                firebaseGoogleSignIn,\r\n                logout,\r\n                resetPassword,\r\n                updateProfile\r\n            }}\r\n        >\r\n            {children}\r\n        </FirebaseContext.Provider>\r\n    );\r\n};\r\n\r\nFirebaseProvider.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default FirebaseContext;\r\n"]},"metadata":{},"sourceType":"module"}