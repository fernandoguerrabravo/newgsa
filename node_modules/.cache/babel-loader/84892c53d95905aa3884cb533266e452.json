{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/gsatotal/newgsa/src/layout/MainLayout/Header/LocalizationSection/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // material-ui\n\nimport { useTheme } from '@mui/material/styles';\nimport { Avatar, Box, ButtonBase, ClickAwayListener, Grid, List, ListItemButton, ListItemText, Paper, Popper, Typography, useMediaQuery } from '@mui/material'; // project imports\n\nimport Transitions from 'ui-component/extended/Transitions';\nimport * as actionTypes from 'store/actions'; // assets\n\nimport TranslateTwoToneIcon from '@mui/icons-material/TranslateTwoTone'; // ==============================|| LOCALIZATION ||============================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LocalizationSection = () => {\n  _s();\n\n  const customization = useSelector(state => state.customization);\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const matchesXs = useMediaQuery(theme.breakpoints.down('md'));\n  const [open, setOpen] = useState(false);\n  /**\r\n   * anchorRef is used on different componets and specifying one type leads to other components throwing an error\r\n   * */\n\n  const anchorRef = useRef(null);\n  const [language, setLanguage] = useState(customization.locale);\n\n  const handleListItemClick = (event, lng) => {\n    setLanguage(lng);\n    dispatch({\n      type: actionTypes.THEME_LOCALE,\n      locale: lng\n    });\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const prevOpen = useRef(open);\n  useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n  useEffect(() => {\n    setLanguage(customization.locale);\n  }, [customization]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        ml: 2,\n        [theme.breakpoints.down('md')]: {\n          ml: 1\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(ButtonBase, {\n        sx: {\n          borderRadius: '12px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Avatar, {\n          variant: \"rounded\",\n          sx: { ...theme.typography.commonAvatar,\n            ...theme.typography.mediumAvatar,\n            border: '1px solid',\n            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\n            color: theme.palette.primary.dark,\n            transition: 'all .2s ease-in-out',\n            '&[aria-controls=\"menu-list-grow\"],&:hover': {\n              borderColor: theme.palette.primary.main,\n              background: theme.palette.primary.main,\n              color: theme.palette.primary.light\n            }\n          },\n          ref: anchorRef,\n          \"aria-controls\": open ? 'menu-list-grow' : undefined,\n          \"aria-haspopup\": \"true\",\n          onClick: handleToggle,\n          color: \"inherit\",\n          children: [language !== 'en' && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              textTransform: 'uppercase'\n            },\n            color: \"inherit\",\n            children: language\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this), language === 'en' && /*#__PURE__*/_jsxDEV(TranslateTwoToneIcon, {\n            sx: {\n              fontSize: '1.3rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popper, {\n      placement: matchesXs ? 'bottom-start' : 'bottom',\n      open: open,\n      anchorEl: anchorRef.current,\n      role: undefined,\n      transition: true,\n      disablePortal: true,\n      popperOptions: {\n        modifiers: [{\n          name: 'offset',\n          options: {\n            offset: [matchesXs ? 0 : 0, 20]\n          }\n        }]\n      },\n      children: ({\n        TransitionProps\n      }) => /*#__PURE__*/_jsxDEV(Transitions, {\n        position: matchesXs ? 'top-left' : 'top',\n        in: open,\n        ...TransitionProps,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 16,\n          children: /*#__PURE__*/_jsxDEV(ClickAwayListener, {\n            onClickAway: handleClose,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              component: \"nav\",\n              sx: {\n                width: '100%',\n                minWidth: 200,\n                maxWidth: 280,\n                bgcolor: theme.palette.background.paper,\n                borderRadius: customization.borderRadius,\n                [theme.breakpoints.down('md')]: {\n                  maxWidth: 250\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'en',\n                onClick: event => handleListItemClick(event, 'en'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"English\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(UK)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'fr',\n                onClick: event => handleListItemClick(event, 'fr'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"fran\\xE7ais\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(French)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'ro',\n                onClick: event => handleListItemClick(event, 'ro'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"Rom\\xE2n\\u0103\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(Romanian)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 179,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'zh',\n                onClick: event => handleListItemClick(event, 'zh'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"\\u4E2D\\u56FD\\u4EBA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(Chinese)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 191,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LocalizationSection, \"v0ZYp+Jz+51cYBxPBbSMvbLwKBQ=\", false, function () {\n  return [useSelector, useDispatch, useTheme, useMediaQuery];\n});\n\n_c = LocalizationSection;\nexport default LocalizationSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalizationSection\");","map":{"version":3,"sources":["/Users/admin/Documents/gsatotal/newgsa/src/layout/MainLayout/Header/LocalizationSection/index.js"],"names":["useState","useRef","useEffect","useDispatch","useSelector","useTheme","Avatar","Box","ButtonBase","ClickAwayListener","Grid","List","ListItemButton","ListItemText","Paper","Popper","Typography","useMediaQuery","Transitions","actionTypes","TranslateTwoToneIcon","LocalizationSection","customization","state","dispatch","theme","matchesXs","breakpoints","down","open","setOpen","anchorRef","language","setLanguage","locale","handleListItemClick","event","lng","type","THEME_LOCALE","handleToggle","prevOpen","handleClose","current","contains","target","focus","ml","borderRadius","typography","commonAvatar","mediumAvatar","border","borderColor","palette","mode","dark","main","primary","light","background","color","transition","undefined","textTransform","fontSize","modifiers","name","options","offset","TransitionProps","width","minWidth","maxWidth","bgcolor","paper"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    ButtonBase,\r\n    ClickAwayListener,\r\n    Grid,\r\n    List,\r\n    ListItemButton,\r\n    ListItemText,\r\n    Paper,\r\n    Popper,\r\n    Typography,\r\n    useMediaQuery\r\n} from '@mui/material';\r\n\r\n// project imports\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport * as actionTypes from 'store/actions';\r\n\r\n// assets\r\nimport TranslateTwoToneIcon from '@mui/icons-material/TranslateTwoTone';\r\n\r\n// ==============================|| LOCALIZATION ||============================== //\r\n\r\nconst LocalizationSection = () => {\r\n    const customization = useSelector((state) => state.customization);\r\n    const dispatch = useDispatch();\r\n\r\n    const theme = useTheme();\r\n    const matchesXs = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    const [open, setOpen] = useState(false);\r\n    /**\r\n     * anchorRef is used on different componets and specifying one type leads to other components throwing an error\r\n     * */\r\n    const anchorRef = useRef(null);\r\n    const [language, setLanguage] = useState(customization.locale);\r\n\r\n    const handleListItemClick = (event, lng) => {\r\n        setLanguage(lng);\r\n        dispatch({ type: actionTypes.THEME_LOCALE, locale: lng });\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const prevOpen = useRef(open);\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    useEffect(() => {\r\n        setLanguage(customization.locale);\r\n    }, [customization]);\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    ml: 2,\r\n                    [theme.breakpoints.down('md')]: {\r\n                        ml: 1\r\n                    }\r\n                }}\r\n            >\r\n                <ButtonBase sx={{ borderRadius: '12px' }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            border: '1px solid',\r\n                            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n                            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n                            color: theme.palette.primary.dark,\r\n                            transition: 'all .2s ease-in-out',\r\n                            '&[aria-controls=\"menu-list-grow\"],&:hover': {\r\n                                borderColor: theme.palette.primary.main,\r\n                                background: theme.palette.primary.main,\r\n                                color: theme.palette.primary.light\r\n                            }\r\n                        }}\r\n                        ref={anchorRef}\r\n                        aria-controls={open ? 'menu-list-grow' : undefined}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleToggle}\r\n                        color=\"inherit\"\r\n                    >\r\n                        {language !== 'en' && (\r\n                            <Typography variant=\"h5\" sx={{ textTransform: 'uppercase' }} color=\"inherit\">\r\n                                {language}\r\n                            </Typography>\r\n                        )}\r\n                        {language === 'en' && <TranslateTwoToneIcon sx={{ fontSize: '1.3rem' }} />}\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n            <Popper\r\n                placement={matchesXs ? 'bottom-start' : 'bottom'}\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [matchesXs ? 0 : 0, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions position={matchesXs ? 'top-left' : 'top'} in={open} {...TransitionProps}>\r\n                        <Paper elevation={16}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <List\r\n                                    component=\"nav\"\r\n                                    sx={{\r\n                                        width: '100%',\r\n                                        minWidth: 200,\r\n                                        maxWidth: 280,\r\n                                        bgcolor: theme.palette.background.paper,\r\n                                        borderRadius: customization.borderRadius,\r\n                                        [theme.breakpoints.down('md')]: {\r\n                                            maxWidth: 250\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    <ListItemButton selected={language === 'en'} onClick={(event) => handleListItemClick(event, 'en')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">English</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (UK)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'fr'} onClick={(event) => handleListItemClick(event, 'fr')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">français</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (French)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'ro'} onClick={(event) => handleListItemClick(event, 'ro')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">Română</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (Romanian)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'zh'} onClick={(event) => handleListItemClick(event, 'zh')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">中国人</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (Chinese)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                </List>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LocalizationSection;\r\n"]},"metadata":{},"sourceType":"module"}