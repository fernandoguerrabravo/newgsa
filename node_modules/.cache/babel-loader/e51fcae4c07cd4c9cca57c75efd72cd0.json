{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/sistema_gsa/newgsa/src/views/forms/tables/TableStickyHead.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; // material-ui\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material'; // project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'name',\n  label: 'Name',\n  minWidth: 170\n}, {\n  id: 'code',\n  label: 'ISO\\u00a0Code',\n  minWidth: 100\n}, {\n  id: 'population',\n  label: 'Population',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'size',\n  label: 'Size\\u00a0(km\\u00b2)',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'density',\n  label: 'Density',\n  minWidth: 170,\n  align: 'right',\n  format: value => typeof value === 'number' && value.toFixed(2)\n}]; // table data\n\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return {\n    name,\n    code,\n    population,\n    size,\n    density\n  };\n}\n\nconst rows = [createData('India', 'IN', 1324171354, 3287263), createData('China', 'CN', 1403500365, 9596961), createData('Italy', 'IT', 60483973, 301340), createData('United States', 'US', 327167434, 9833520), createData('Canada', 'CA', 37602103, 9984670), createData('Australia', 'AU', 25475400, 7692024), createData('Germany', 'DE', 83019200, 357578), createData('Ireland', 'IE', 4857000, 70273), createData('Mexico', 'MX', 126577691, 1972550), createData('Japan', 'JP', 126317000, 377973), createData('France', 'FR', 67022000, 640679), createData('United Kingdom', 'GB', 67545757, 242495), createData('Russia', 'RU', 146793744, 17098246), createData('Nigeria', 'NG', 200962417, 923768), createData('Brazil', 'BR', 210147125, 8515767)]; // ==============================|| TABLE - STICKY HEADER ||============================== //\n\nexport default function StickyHeadTable() {\n  _s();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    var _event$target;\n\n    setRowsPerPage(+(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value));\n    setPage(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MainCard, {\n    content: false,\n    title: \"Sticky Header\",\n    secondary: /*#__PURE__*/_jsxDEV(SecondaryAction, {\n      link: \"https://next.material-ui.com/components/tables/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 24\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        maxHeight: 440\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              sx: {\n                py: 3\n              },\n              align: column.align,\n              style: {\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              py: 3\n            },\n            hover: true,\n            role: \"checkbox\",\n            tabIndex: -1,\n            children: columns.map(column => {\n              const value = row[column.id];\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                align: column.align,\n                children: column.format && typeof value === 'number' ? column.format(value) : value\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 41\n              }, this);\n            })\n          }, row.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StickyHeadTable, \"65nbIEELuFY2eeUXbED/8VsHrEQ=\");\n\n_c = StickyHeadTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"StickyHeadTable\");","map":{"version":3,"sources":["/Users/admin/Documents/sistema_gsa/newgsa/src/views/forms/tables/TableStickyHead.js"],"names":["useState","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","MainCard","SecondaryAction","columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","createData","name","code","population","size","density","rows","StickyHeadTable","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","maxHeight","map","column","py","slice","row","length"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n\r\n// material-ui\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\r\n\r\nconst columns = [\r\n    { id: 'name', label: 'Name', minWidth: 170 },\r\n    { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n    {\r\n        id: 'population',\r\n        label: 'Population',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'size',\r\n        label: 'Size\\u00a0(km\\u00b2)',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'density',\r\n        label: 'Density',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => typeof value === 'number' && value.toFixed(2)\r\n    }\r\n];\r\n\r\n// table data\r\nfunction createData(name, code, population, size) {\r\n    const density = population / size;\r\n    return { name, code, population, size, density };\r\n}\r\n\r\nconst rows = [\r\n    createData('India', 'IN', 1324171354, 3287263),\r\n    createData('China', 'CN', 1403500365, 9596961),\r\n    createData('Italy', 'IT', 60483973, 301340),\r\n    createData('United States', 'US', 327167434, 9833520),\r\n    createData('Canada', 'CA', 37602103, 9984670),\r\n    createData('Australia', 'AU', 25475400, 7692024),\r\n    createData('Germany', 'DE', 83019200, 357578),\r\n    createData('Ireland', 'IE', 4857000, 70273),\r\n    createData('Mexico', 'MX', 126577691, 1972550),\r\n    createData('Japan', 'JP', 126317000, 377973),\r\n    createData('France', 'FR', 67022000, 640679),\r\n    createData('United Kingdom', 'GB', 67545757, 242495),\r\n    createData('Russia', 'RU', 146793744, 17098246),\r\n    createData('Nigeria', 'NG', 200962417, 923768),\r\n    createData('Brazil', 'BR', 210147125, 8515767)\r\n];\r\n\r\n// ==============================|| TABLE - STICKY HEADER ||============================== //\r\n\r\nexport default function StickyHeadTable() {\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event?.target?.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <MainCard\r\n            content={false}\r\n            title=\"Sticky Header\"\r\n            secondary={<SecondaryAction link=\"https://next.material-ui.com/components/tables/\" />}\r\n        >\r\n            {/* table */}\r\n            <TableContainer sx={{ maxHeight: 440 }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell sx={{ py: 3 }} key={column.id} align={column.align} style={{ minWidth: column.minWidth }}>\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\r\n                            <TableRow sx={{ py: 3 }} hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                {columns.map((column) => {\r\n                                    const value = row[column.id];\r\n                                    return (\r\n                                        <TableCell key={column.id} align={column.align}>\r\n                                            {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                        </TableCell>\r\n                                    );\r\n                                })}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {/* table pagination */}\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n        </MainCard>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}