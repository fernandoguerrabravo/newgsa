{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/sistema_gsa/newgsa/src/views/ui-elements/advance/UIDialog/AlertDialogSlide.js\",\n    _s = $RefreshSig$();\n\nimport { forwardRef, useState } from 'react'; // material-ui\n\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Slide, Typography } from '@mui/material'; // animation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Transition = /*#__PURE__*/forwardRef(_c = (props, ref) => /*#__PURE__*/_jsxDEV(Slide, {\n  direction: \"up\",\n  ref: ref,\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 47\n}, this)); // ===============================|| UI DIALOG - SLIDE ANIMATION ||=============================== //\n\n_c2 = Transition;\nexport default function AlertDialogSlide() {\n  _s();\n\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Slide in alert dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      TransitionComponent: Transition,\n      keepMounted: true,\n      onClose: handleClose,\n      \"aria-labelledby\": \"alert-dialog-slide-title1\",\n      \"aria-describedby\": \"alert-dialog-slide-description1\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"alert-dialog-slide-title1\",\n        children: \"Use Google's location service?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          id: \"alert-dialog-slide-description1\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            component: \"span\",\n            children: \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        sx: {\n          pr: 2.5\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            color: theme.palette.error.dark,\n            borderColor: theme.palette.error.dark\n          },\n          onClick: handleClose,\n          color: \"secondary\",\n          children: \"Disagree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"small\",\n          onClick: handleClose,\n          children: \"Agree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AlertDialogSlide, \"wGmR9/hunq3L23vhfiuhNflRfmI=\", false, function () {\n  return [useTheme];\n});\n\n_c3 = AlertDialogSlide;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Transition$forwardRef\");\n$RefreshReg$(_c2, \"Transition\");\n$RefreshReg$(_c3, \"AlertDialogSlide\");","map":{"version":3,"sources":["/Users/admin/Documents/sistema_gsa/newgsa/src/views/ui-elements/advance/UIDialog/AlertDialogSlide.js"],"names":["forwardRef","useState","useTheme","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Slide","Typography","Transition","props","ref","AlertDialogSlide","theme","open","setOpen","handleClickOpen","handleClose","pr","color","palette","error","dark","borderColor"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC,C,CAEA;;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,aAAzB,EAAwCC,aAAxC,EAAuDC,iBAAvD,EAA0EC,WAA1E,EAAuFC,KAAvF,EAA8FC,UAA9F,QAAgH,eAAhH,C,CAEA;;;;AACA,MAAMC,UAAU,gBAAGX,UAAU,MAAC,CAACY,KAAD,EAAQC,GAAR,kBAAgB,QAAC,KAAD;AAAO,EAAA,SAAS,EAAC,IAAjB;AAAsB,EAAA,GAAG,EAAEA,GAA3B;AAAA,KAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,QAAjB,CAA7B,C,CAEA;;MAFMD,U;AAIN,eAAe,SAASG,gBAAT,GAA4B;AAAA;;AACvC,QAAMC,KAAK,GAAGb,QAAQ,EAAtB;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMiB,eAAe,GAAG,MAAM;AAC1BD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFD;;AAIA,QAAME,WAAW,GAAG,MAAM;AACtBF,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,UAAhB;AAA2B,MAAA,OAAO,EAAEC,eAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,MAAD;AACI,MAAA,IAAI,EAAEF,IADV;AAEI,MAAA,mBAAmB,EAAEL,UAFzB;AAGI,MAAA,WAAW,MAHf;AAII,MAAA,OAAO,EAAEQ,WAJb;AAKI,yBAAgB,2BALpB;AAMI,0BAAiB,iCANrB;AAAA,8BAQI,QAAC,WAAD;AAAa,QAAA,EAAE,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,eASI,QAAC,aAAD;AAAA,+BACI,QAAC,iBAAD;AAAmB,UAAA,EAAE,EAAC,iCAAtB;AAAA,iCACI,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAA4B,YAAA,SAAS,EAAC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ,eAiBI,QAAC,aAAD;AAAe,QAAA,EAAE,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAnB;AAAA,gCACI,QAAC,MAAD;AACI,UAAA,EAAE,EAAE;AAAEC,YAAAA,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAcC,KAAd,CAAoBC,IAA7B;AAAmCC,YAAAA,WAAW,EAAEV,KAAK,CAACO,OAAN,CAAcC,KAAd,CAAoBC;AAApE,WADR;AAEI,UAAA,OAAO,EAAEL,WAFb;AAGI,UAAA,KAAK,EAAC,WAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,IAAI,EAAC,OAAjC;AAAyC,UAAA,OAAO,EAAEA,WAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADJ;AAqCH;;GAjDuBL,gB;UACNZ,Q;;;MADMY,gB","sourcesContent":["import { forwardRef, useState } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Slide, Typography } from '@mui/material';\r\n\r\n// animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\n// ===============================|| UI DIALOG - SLIDE ANIMATION ||=============================== //\r\n\r\nexport default function AlertDialogSlide() {\r\n    const theme = useTheme();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"outlined\" onClick={handleClickOpen}>\r\n                Slide in alert dialog\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Use Google&apos;s location service?</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps\r\n                            are running.\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        Disagree\r\n                    </Button>\r\n                    <Button variant=\"contained\" size=\"small\" onClick={handleClose}>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}