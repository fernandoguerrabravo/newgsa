{"ast":null,"code":"import services from 'utils/mockAdapter'; // third-party\n\nimport jwt from 'jsonwebtoken'; // project imports\n\nimport config from 'config'; // constant\n\nconst JWT_SECRET = config.jwt.secret;\nconst JWT_EXPIRES_TIME = config.jwt.timeout;\n\nconst delay = timeout => new Promise(res => setTimeout(res, timeout));\n\nlet users = [{\n  id: '5e86809283e28b96d2d38537',\n  email: 'info@codedthemes.com',\n  password: '123456',\n  name: 'JWT User'\n}]; // ==============================|| MOCK SERVICES ||============================== //\n\nservices.onPost('/api/account/login').reply(async request => {\n  try {\n    await delay(500);\n    const {\n      email,\n      password\n    } = JSON.parse(request.data);\n\n    if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\n      const localUsers = window.localStorage.getItem('users');\n      users = JSON.parse(localUsers);\n    }\n\n    const user = users.find(_user => _user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: 'Verify Your Email & Password'\n      }];\n    }\n\n    if (user.password !== password) {\n      return [400, {\n        message: 'Invalid Password'\n      }];\n    }\n\n    const serviceToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_TIME\n    });\n    return [200, {\n      serviceToken,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});\nservices.onPost('/api/account/register').reply(async request => {\n  try {\n    await delay(500);\n    const {\n      id,\n      email,\n      password,\n      firstName,\n      lastName\n    } = JSON.parse(request.data);\n\n    if (!email || !password) {\n      return [400, {\n        message: 'Enter Your Email & Password'\n      }];\n    }\n\n    if (!firstName || !lastName) {\n      return [400, {\n        message: 'Enter Your Name'\n      }];\n    }\n\n    users = [...users, {\n      id,\n      email,\n      password,\n      name: `${firstName} ${lastName}`\n    }];\n    return [200, users];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});\nservices.onGet('/api/account/me').reply(request => {\n  try {\n    const {\n      Authorization\n    } = request.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Token Missing'\n      }];\n    }\n\n    if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\n      const localUsers = window.localStorage.getItem('users');\n      users = JSON.parse(localUsers);\n    }\n\n    const serviceToken = Authorization.split(' ')[1];\n    const jwData = jwt.verify(serviceToken, JWT_SECRET);\n    const {\n      userId\n    } = jwData;\n    const user = users.find(_user => _user.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid Token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        email: user.email\n      }\n    }];\n  } catch (err) {\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});","map":{"version":3,"sources":["/Users/admin/Documents/newgsa/src/_mockApis/account.js"],"names":["services","jwt","config","JWT_SECRET","secret","JWT_EXPIRES_TIME","timeout","delay","Promise","res","setTimeout","users","id","email","password","name","onPost","reply","request","JSON","parse","data","window","localStorage","getItem","undefined","localUsers","user","find","_user","message","serviceToken","sign","userId","expiresIn","err","console","error","firstName","lastName","onGet","Authorization","headers","split","jwData","verify"],"mappings":"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","sourcesContent":["import services from 'utils/mockAdapter';\r\n\r\n// third-party\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// project imports\r\nimport config from 'config';\r\n\r\n// constant\r\nconst JWT_SECRET = config.jwt.secret;\r\nconst JWT_EXPIRES_TIME = config.jwt.timeout;\r\n\r\nconst delay = (timeout) => new Promise((res) => setTimeout(res, timeout));\r\n\r\nlet users = [\r\n    {\r\n        id: '5e86809283e28b96d2d38537',\r\n        email: 'info@codedthemes.com',\r\n        password: '123456',\r\n        name: 'JWT User'\r\n    }\r\n];\r\n\r\n// ==============================|| MOCK SERVICES ||============================== //\r\n\r\nservices.onPost('/api/account/login').reply(async (request) => {\r\n    try {\r\n        await delay(500);\r\n\r\n        const { email, password } = JSON.parse(request.data);\r\n\r\n        if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\r\n            const localUsers = window.localStorage.getItem('users');\r\n            users = JSON.parse(localUsers);\r\n        }\r\n\r\n        const user = users.find((_user) => _user.email === email);\r\n\r\n        if (!user) {\r\n            return [400, { message: 'Verify Your Email & Password' }];\r\n        }\r\n\r\n        if (user.password !== password) {\r\n            return [400, { message: 'Invalid Password' }];\r\n        }\r\n\r\n        const serviceToken = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_TIME });\r\n\r\n        return [\r\n            200,\r\n            {\r\n                serviceToken,\r\n                user: {\r\n                    id: user.id,\r\n                    email: user.email,\r\n                    name: user.name\r\n                }\r\n            }\r\n        ];\r\n    } catch (err) {\r\n        console.error(err);\r\n        return [500, { message: 'Server Error' }];\r\n    }\r\n});\r\n\r\nservices.onPost('/api/account/register').reply(async (request) => {\r\n    try {\r\n        await delay(500);\r\n\r\n        const { id, email, password, firstName, lastName } = JSON.parse(request.data);\r\n\r\n        if (!email || !password) {\r\n            return [400, { message: 'Enter Your Email & Password' }];\r\n        }\r\n\r\n        if (!firstName || !lastName) {\r\n            return [400, { message: 'Enter Your Name' }];\r\n        }\r\n\r\n        users = [\r\n            ...users,\r\n            {\r\n                id,\r\n                email,\r\n                password,\r\n                name: `${firstName} ${lastName}`\r\n            }\r\n        ];\r\n\r\n        return [200, users];\r\n    } catch (err) {\r\n        console.error(err);\r\n        return [500, { message: 'Server Error' }];\r\n    }\r\n});\r\n\r\nservices.onGet('/api/account/me').reply((request) => {\r\n    try {\r\n        const { Authorization } = request.headers;\r\n\r\n        if (!Authorization) {\r\n            return [401, { message: 'Token Missing' }];\r\n        }\r\n\r\n        if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\r\n            const localUsers = window.localStorage.getItem('users');\r\n            users = JSON.parse(localUsers);\r\n        }\r\n\r\n        const serviceToken = Authorization.split(' ')[1];\r\n        const jwData = jwt.verify(serviceToken, JWT_SECRET);\r\n        const { userId } = jwData;\r\n        const user = users.find((_user) => _user.id === userId);\r\n\r\n        if (!user) {\r\n            return [401, { message: 'Invalid Token' }];\r\n        }\r\n\r\n        return [\r\n            200,\r\n            {\r\n                user: {\r\n                    id: user.id,\r\n                    email: user.email\r\n                }\r\n            }\r\n        ];\r\n    } catch (err) {\r\n        return [500, { message: 'Server Error' }];\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}