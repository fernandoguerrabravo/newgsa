{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/gsatotal/newgsa/src/views/profile/components/SellerStoreFiles.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@mui/material/styles';\nimport { Button, Grid, Divider, FormLabel, FormControlLabel } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport Swal from 'sweetalert2';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport { green, red, blue } from '@mui/material/colors';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@mui/material/Tooltip';\nimport FormControl from '@mui/material/FormControl';\nimport { Save, Attachment } from \"@mui/icons-material\";\nimport PublishIcon from '@material-ui/icons/Publish';\nimport FileProvider from '../providers/file.provider';\nimport { checkFileMIMEType, checkFileSize, getFormattedSize } from '../helpers/files.helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst blobToBase64 = async file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = error => reject(error);\n});\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\nconst styles2 = makeStyles(theme => ({\n  icons: {\n    fontSize: 'small',\n    backgroundColor: red[500],\n    color: red[500]\n  },\n  formControl2: {\n    minWidth: 300,\n    padding: theme.spacing(1)\n  },\n  input: {\n    display: 'none'\n  },\n  formControl1: {\n    minWidth: 100,\n    padding: theme.spacing(1)\n  }\n}));\n\nconst SellerStoreFiles = ({\n  skus,\n  idcliente\n}) => {\n  _s();\n\n  const classes2 = styles2();\n  const classes = useStyles();\n  const MAXIMUM_FILES_LIMIT = 5;\n  /**\n   * Size in MB\n   */\n\n  const MAXIMUM_FILE_SIZE = 2;\n  const ALLOWED_FORMATS = '.pdf, .doc, .docx, .odt, image/*';\n  const [files, setFiles] = useState([]); // const [refId, setRefId] = useState(idcliente);\n  // const [skur, setSku] = useState('');\n\n  const [submitting, setSubmitting] = useState(false);\n\n  const getCurrentFiles = async event => {\n    const rawFiles = event.target.files;\n    const fileList = []; // WIll contain an array of type File[]\n\n    if (!rawFiles) {\n      return;\n    }\n\n    if (rawFiles instanceof Array) {\n      rawFiles.forEach(file => fileList.push(file));\n    } else {\n      const rawFilesArray = Array.from(rawFiles);\n      rawFilesArray.forEach(file => fileList.push(file));\n    }\n\n    const finalFileList = [];\n\n    for (const file of fileList) {\n      var _encodedData$toString;\n\n      const extensionSeparatorIndex = file.name.lastIndexOf('.');\n      const formattedName = file.name.substring(0, extensionSeparatorIndex);\n      const extension = file.name.substr(extensionSeparatorIndex);\n      const encodedData = await blobToBase64(file);\n      const formattedFile = {\n        name: formattedName,\n        extension,\n        file: (_encodedData$toString = encodedData === null || encodedData === void 0 ? void 0 : encodedData.toString()) !== null && _encodedData$toString !== void 0 ? _encodedData$toString : '',\n        type: 'append',\n        size: file.size\n      };\n\n      if (files.find(appendedFile => appendedFile.name === formattedFile.name)) {\n        Swal.fire({\n          icon: 'info',\n          title: `The file ${formattedFile.name + formattedFile.extension} is already added`\n        });\n        break;\n      }\n\n      if (!checkFileMIMEType(file.type, ALLOWED_FORMATS)) {\n        Swal.fire({\n          icon: 'warning',\n          title: 'Please select another file (Supported formats: images and PDF)',\n          html: `<small class=\"text-muted\">The file ${file.name} is not supported</small>`\n        });\n        break;\n      }\n\n      if (!checkFileSize(file.size, MAXIMUM_FILE_SIZE)) {\n        Swal.fire({\n          icon: 'warning',\n          title: `The maximum file size is ${MAXIMUM_FILE_SIZE}MB`,\n          html: `<small class=\"text-muted\">The file ${file.name} have a size of ${getFormattedSize(file.size, 2)}</small>`\n        });\n        break;\n      }\n\n      if (files.length < MAXIMUM_FILES_LIMIT) {\n        finalFileList.push(formattedFile);\n      } else {\n        Swal.fire({\n          icon: 'info',\n          title: `The maximum file quantity to upload is ${MAXIMUM_FILES_LIMIT}`\n        });\n        break;\n      }\n    }\n\n    if (finalFileList.length > 0) {\n      setFiles([...files, ...finalFileList]);\n    }\n\n    event.target.value = event.target.defaultValue; // Reset input cached value\n  };\n  /* const handleRefIdChange = (event) => {\n  \t if (event.isTrusted) {\n  \t\t setRefId(event.target.value)\n  \t }\n   } \n  \n   const handleSkuChange = (event) => {\n  \t if (event.isTrusted) {\n  \t\t setSku(event.target.value);\n  \t }\n   }v */\n\n\n  const handleFilesSubmit = async event => {\n    event.preventDefault();\n\n    if (event.isTrusted && skus !== '') {\n      const proceed = await Swal.fire({\n        title: 'The files will be uploaded to the S3 bucket. Proceed?',\n        text: `The destination directory is /${idcliente}/${skus}`,\n        icon: 'question',\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No. Abort action',\n        showCancelButton: true\n      });\n\n      if (!(proceed === null || proceed === void 0 ? void 0 : proceed.isConfirmed)) {\n        return;\n      }\n\n      setSubmitting(true);\n\n      try {\n        var _response$value;\n\n        const response = (await new FileProvider().submitFiles(files, idcliente, skus)).data;\n\n        if (response === null || response === void 0 ? void 0 : (_response$value = response.value) === null || _response$value === void 0 ? void 0 : _response$value.fileUpload) {\n          await Swal.fire({\n            title: `${files.length > 1 ? 'Files' : 'File'} uploaded successfully`,\n            icon: 'success'\n          });\n          setFiles([]);\n        } else {\n          var _response$error$messa;\n\n          await Swal.fire({\n            title: (_response$error$messa = response.error.message) !== null && _response$error$messa !== void 0 ? _response$error$messa : 'Unexpected error',\n            icon: 'error'\n          });\n        }\n      } catch (reason) {\n        Swal.fire({\n          title: 'Unexpected error',\n          text: 'Please try again later',\n          icon: 'error'\n        });\n      }\n\n      setSubmitting(false);\n      event.target.reset();\n    } else {\n      Swal.fire({\n        title: 'Opps!!',\n        text: 'Please enter a valid SKU',\n        icon: 'Warning'\n      });\n    }\n  };\n\n  const removeFile = (event, index) => {\n    if (event.isTrusted) {\n      const currentFiles = files;\n      currentFiles.splice(index, 1);\n      setFiles([...currentFiles]);\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'S3 REST API w/ File Upload Example';\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleFilesSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      className: classes2.formControl2,\n      children: [\"Upload Business and Legal Documents\", /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"you can later upload documents or images of your product.\",\n        children: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          fontSize: \"small\",\n          color: \"action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      className: classes2.formControl1,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"file1\",\n        name: \"file1\",\n        type: \"file\",\n        onChange: getCurrentFiles,\n        variant: \"outlined\",\n        className: classes2.input,\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file1\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(AttachmentIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this),\n          size: \"large\",\n          variant: \"outlined\",\n          component: \"span\",\n          children: \"Select File ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 4\n    }, this), files.length > 0 ? /*#__PURE__*/_jsxDEV(FormControl, {\n      className: classes2.formControl2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(PublishIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }, this),\n        size: \"large\",\n        variant: \"outlined\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Upload List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }, this) : null, /*#__PURE__*/_jsxDEV(Typography, {\n      className: classes2.formControl2,\n      gutterBottom: true,\n      children: files.length > 0 ? `Files in queue (${files.length}):` : 'No files in queue yet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 4\n    }, this), files.length > 0 ? /*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes2.formControl2,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"File Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"File Extension\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"File Size\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: files.map((file, index) => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: file.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: file.extension\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: getFormattedSize(file.size, 2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  type: \"button\",\n                  onClick: event => removeFile(event, index),\n                  disabled: submitting,\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 12\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 11\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 10\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SellerStoreFiles, \"VdM2xE5dtkNeH7sqUphfuDJu3gI=\", false, function () {\n  return [useStyles];\n});\n\n_c = SellerStoreFiles;\nexport default SellerStoreFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"SellerStoreFiles\");","map":{"version":3,"sources":["/Users/admin/Documents/gsatotal/newgsa/src/views/profile/components/SellerStoreFiles.jsx"],"names":["React","useState","useEffect","makeStyles","Button","Grid","Divider","FormLabel","FormControlLabel","TextField","Swal","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","green","red","blue","InfoIcon","Tooltip","FormControl","Save","Attachment","PublishIcon","FileProvider","checkFileMIMEType","checkFileSize","getFormattedSize","blobToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","useStyles","table","minWidth","styles2","theme","icons","fontSize","backgroundColor","color","formControl2","padding","spacing","input","display","formControl1","SellerStoreFiles","skus","idcliente","classes2","classes","MAXIMUM_FILES_LIMIT","MAXIMUM_FILE_SIZE","ALLOWED_FORMATS","files","setFiles","submitting","setSubmitting","getCurrentFiles","event","rawFiles","target","fileList","Array","forEach","push","rawFilesArray","from","finalFileList","extensionSeparatorIndex","name","lastIndexOf","formattedName","substring","extension","substr","encodedData","formattedFile","toString","type","size","find","appendedFile","fire","icon","title","html","length","value","defaultValue","handleFilesSubmit","preventDefault","isTrusted","proceed","text","confirmButtonText","cancelButtonText","showCancelButton","isConfirmed","response","submitFiles","data","fileUpload","message","reason","reset","removeFile","index","currentFiles","splice","document","map"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,SAAhC,EAA2CC,gBAA3C,QAAmE,eAAnE;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,IAArB,QAAiC,sBAAjC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,qBAAjC;AAEA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,EAA2CC,gBAA3C,QAAmE,yBAAnE;;;AAEA,MAAMC,YAAY,GAAG,MAAMC,IAAN,IACpB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAChC,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;;AACAI,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;AACAJ,EAAAA,MAAM,CAACK,OAAP,GAAiBC,KAAK,IAAIP,MAAM,CAACO,KAAD,CAAhC;AACA,CALD,CADD;;AAQA,MAAMC,SAAS,GAAGxC,UAAU,CAAC;AAC5ByC,EAAAA,KAAK,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ;AADqB,CAAD,CAA5B;AAMA,MAAMC,OAAO,GAAG3C,UAAU,CAAC4C,KAAK,KAAK;AACpCC,EAAAA,KAAK,EAAE;AACNC,IAAAA,QAAQ,EAAE,OADJ;AAENC,IAAAA,eAAe,EAAE/B,GAAG,CAAC,GAAD,CAFd;AAGNgC,IAAAA,KAAK,EAAEhC,GAAG,CAAC,GAAD;AAHJ,GAD6B;AAOpCiC,EAAAA,YAAY,EAAE;AACbP,IAAAA,QAAQ,EAAE,GADG;AAEbQ,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd;AAFI,GAPsB;AAYpCC,EAAAA,KAAK,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH,GAZ6B;AAgBpCC,EAAAA,YAAY,EAAE;AACbZ,IAAAA,QAAQ,EAAE,GADG;AAEbQ,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd;AAFI;AAhBsB,CAAL,CAAN,CAA1B;;AAsBA,MAAMI,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAyB;AAAA;;AACjD,QAAMC,QAAQ,GAAGf,OAAO,EAAxB;AACA,QAAMgB,OAAO,GAAGnB,SAAS,EAAzB;AAEA,QAAMoB,mBAAmB,GAAG,CAA5B;AACA;AACD;AACA;;AACC,QAAMC,iBAAiB,GAAG,CAA1B;AACA,QAAMC,eAAe,GAAG,kCAAxB;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlE,QAAQ,CAAC,EAAD,CAAlC,CAXiD,CAYjD;AACA;;AAEA,QAAM,CAACmE,UAAD,EAAaC,aAAb,IAA8BpE,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMqE,eAAe,GAAG,MAAMC,KAAN,IAAe;AACtC,UAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaP,KAA9B;AACA,UAAMQ,QAAQ,GAAG,EAAjB,CAFsC,CAEjB;;AACrB,QAAI,CAACF,QAAL,EAAe;AACd;AACA;;AACD,QAAIA,QAAQ,YAAYG,KAAxB,EAA+B;AAC9BH,MAAAA,QAAQ,CAACI,OAAT,CAAiB5C,IAAI,IAAI0C,QAAQ,CAACG,IAAT,CAAc7C,IAAd,CAAzB;AACA,KAFD,MAEO;AACN,YAAM8C,aAAa,GAAGH,KAAK,CAACI,IAAN,CAAWP,QAAX,CAAtB;AACAM,MAAAA,aAAa,CAACF,OAAd,CAAsB5C,IAAI,IAAI0C,QAAQ,CAACG,IAAT,CAAc7C,IAAd,CAA9B;AACA;;AACD,UAAMgD,aAAa,GAAG,EAAtB;;AACA,SAAK,MAAMhD,IAAX,IAAmB0C,QAAnB,EAA6B;AAAA;;AAC5B,YAAMO,uBAAuB,GAAGjD,IAAI,CAACkD,IAAL,CAAUC,WAAV,CAAsB,GAAtB,CAAhC;AACA,YAAMC,aAAa,GAAGpD,IAAI,CAACkD,IAAL,CAAUG,SAAV,CAAoB,CAApB,EAAuBJ,uBAAvB,CAAtB;AACA,YAAMK,SAAS,GAAGtD,IAAI,CAACkD,IAAL,CAAUK,MAAV,CAAiBN,uBAAjB,CAAlB;AACA,YAAMO,WAAW,GAAG,MAAMzD,YAAY,CAACC,IAAD,CAAtC;AACA,YAAMyD,aAAa,GAAG;AACrBP,QAAAA,IAAI,EAAEE,aADe;AAErBE,QAAAA,SAFqB;AAGrBtD,QAAAA,IAAI,2BAAEwD,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEE,QAAb,EAAF,yEAA6B,EAHZ;AAIrBC,QAAAA,IAAI,EAAE,QAJe;AAKrBC,QAAAA,IAAI,EAAE5D,IAAI,CAAC4D;AALU,OAAtB;;AAOA,UAAI1B,KAAK,CAAC2B,IAAN,CAAWC,YAAY,IAAIA,YAAY,CAACZ,IAAb,KAAsBO,aAAa,CAACP,IAA/D,CAAJ,EAA0E;AACzExE,QAAAA,IAAI,CAACqF,IAAL,CAAU;AACTC,UAAAA,IAAI,EAAE,MADG;AAETC,UAAAA,KAAK,EAAG,YAAWR,aAAa,CAACP,IAAd,GAAqBO,aAAa,CAACH,SAAU;AAFvD,SAAV;AAIA;AACA;;AACD,UAAI,CAAC1D,iBAAiB,CAACI,IAAI,CAAC2D,IAAN,EAAY1B,eAAZ,CAAtB,EAAoD;AACnDvD,QAAAA,IAAI,CAACqF,IAAL,CAAU;AACTC,UAAAA,IAAI,EAAE,SADG;AAETC,UAAAA,KAAK,EAAE,gEAFE;AAGTC,UAAAA,IAAI,EAAG,sCAAqClE,IAAI,CAACkD,IAAK;AAH7C,SAAV;AAKA;AACA;;AACD,UAAI,CAACrD,aAAa,CAACG,IAAI,CAAC4D,IAAN,EAAY5B,iBAAZ,CAAlB,EAAkD;AACjDtD,QAAAA,IAAI,CAACqF,IAAL,CAAU;AACTC,UAAAA,IAAI,EAAE,SADG;AAETC,UAAAA,KAAK,EAAG,4BAA2BjC,iBAAkB,IAF5C;AAGTkC,UAAAA,IAAI,EAAG,sCAAqClE,IAAI,CAACkD,IAAK,mBAAkBpD,gBAAgB,CACvFE,IAAI,CAAC4D,IADkF,EAEvF,CAFuF,CAGtF;AANO,SAAV;AAQA;AACA;;AACD,UAAI1B,KAAK,CAACiC,MAAN,GAAepC,mBAAnB,EAAwC;AACvCiB,QAAAA,aAAa,CAACH,IAAd,CAAmBY,aAAnB;AACA,OAFD,MAEO;AACN/E,QAAAA,IAAI,CAACqF,IAAL,CAAU;AACTC,UAAAA,IAAI,EAAE,MADG;AAETC,UAAAA,KAAK,EAAG,0CAAyClC,mBAAoB;AAF5D,SAAV;AAIA;AACA;AACD;;AACD,QAAIiB,aAAa,CAACmB,MAAd,GAAuB,CAA3B,EAA8B;AAC7BhC,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGc,aAAd,CAAD,CAAR;AACA;;AACDT,IAAAA,KAAK,CAACE,MAAN,CAAa2B,KAAb,GAAqB7B,KAAK,CAACE,MAAN,CAAa4B,YAAlC,CAhEsC,CAgEU;AAChD,GAjED;AAmEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEC,QAAMC,iBAAiB,GAAG,MAAM/B,KAAN,IAAe;AACxCA,IAAAA,KAAK,CAACgC,cAAN;;AACA,QAAIhC,KAAK,CAACiC,SAAN,IAAmB7C,IAAI,KAAK,EAAhC,EAAoC;AACnC,YAAM8C,OAAO,GAAG,MAAM/F,IAAI,CAACqF,IAAL,CAAU;AAC/BE,QAAAA,KAAK,EAAE,uDADwB;AAE/BS,QAAAA,IAAI,EAAG,iCAAgC9C,SAAU,IAAGD,IAAK,EAF1B;AAG/BqC,QAAAA,IAAI,EAAE,UAHyB;AAI/BW,QAAAA,iBAAiB,EAAE,KAJY;AAK/BC,QAAAA,gBAAgB,EAAE,kBALa;AAM/BC,QAAAA,gBAAgB,EAAE;AANa,OAAV,CAAtB;;AAQA,UAAI,EAACJ,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEK,WAAV,CAAJ,EAA2B;AAC1B;AACA;;AACDzC,MAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,UAAI;AAAA;;AACH,cAAM0C,QAAQ,GAAG,CAAC,MAAM,IAAIpF,YAAJ,GAAmBqF,WAAnB,CAA+B9C,KAA/B,EAAsCN,SAAtC,EAAiDD,IAAjD,CAAP,EAA+DsD,IAAhF;;AACA,YAAIF,QAAJ,aAAIA,QAAJ,0CAAIA,QAAQ,CAAEX,KAAd,oDAAI,gBAAiBc,UAArB,EAAiC;AAChC,gBAAMxG,IAAI,CAACqF,IAAL,CAAU;AACfE,YAAAA,KAAK,EAAG,GAAE/B,KAAK,CAACiC,MAAN,GAAe,CAAf,GAAmB,OAAnB,GAA6B,MAAO,wBAD/B;AAEfH,YAAAA,IAAI,EAAE;AAFS,WAAV,CAAN;AAIA7B,UAAAA,QAAQ,CAAC,EAAD,CAAR;AACA,SAND,MAMO;AAAA;;AACN,gBAAMzD,IAAI,CAACqF,IAAL,CAAU;AACfE,YAAAA,KAAK,2BAAEc,QAAQ,CAACrE,KAAT,CAAeyE,OAAjB,yEAA4B,kBADlB;AAEfnB,YAAAA,IAAI,EAAE;AAFS,WAAV,CAAN;AAIA;AACD,OAdD,CAcE,OAAOoB,MAAP,EAAe;AAChB1G,QAAAA,IAAI,CAACqF,IAAL,CAAU;AACTE,UAAAA,KAAK,EAAE,kBADE;AAETS,UAAAA,IAAI,EAAE,wBAFG;AAGTV,UAAAA,IAAI,EAAE;AAHG,SAAV;AAKA;;AACD3B,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,MAAAA,KAAK,CAACE,MAAN,CAAa4C,KAAb;AACA,KApCD,MAoCO;AACN3G,MAAAA,IAAI,CAACqF,IAAL,CAAU;AACTE,QAAAA,KAAK,EAAE,QADE;AAETS,QAAAA,IAAI,EAAE,0BAFG;AAGTV,QAAAA,IAAI,EAAE;AAHG,OAAV;AAKA;AACD,GA7CD;;AA+CA,QAAMsB,UAAU,GAAG,CAAC/C,KAAD,EAAQgD,KAAR,KAAkB;AACpC,QAAIhD,KAAK,CAACiC,SAAV,EAAqB;AACpB,YAAMgB,YAAY,GAAGtD,KAArB;AACAsD,MAAAA,YAAY,CAACC,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACApD,MAAAA,QAAQ,CAAC,CAAC,GAAGqD,YAAJ,CAAD,CAAR;AACA;AACD,GAND;;AAQAtH,EAAAA,SAAS,CAAC,MAAM;AACfwH,IAAAA,QAAQ,CAACzB,KAAT,GAAiB,oCAAjB;AACA,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACC;AAAM,IAAA,QAAQ,EAAEK,iBAAhB;AAAA,4BACC,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,YAAY,MAArC;AAAsC,MAAA,SAAS,EAAEzC,QAAQ,CAACT,YAA1D;AAAA,qEAEC,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,2DAAf;AAAA,+BACC,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAC,OAAnB;AAA2B,UAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAOC,QAAC,WAAD;AAAa,MAAA,SAAS,EAAES,QAAQ,CAACJ,YAAjC;AAAA,8BACC,QAAC,SAAD;AACC,QAAA,EAAE,EAAC,OADJ;AAEC,QAAA,IAAI,EAAC,OAFN;AAGC,QAAA,IAAI,EAAC,MAHN;AAIC,QAAA,QAAQ,EAAEa,eAJX;AAKC,QAAA,OAAO,EAAC,UALT;AAMC,QAAA,SAAS,EAAET,QAAQ,CAACN,KANrB;AAOC,QAAA,QAAQ;AAPT;AAAA;AAAA;AAAA;AAAA,cADD,eAUC;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA,+BACC,QAAC,MAAD;AAAQ,UAAA,SAAS,eAAE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,kBAAnB;AAAuC,UAAA,IAAI,EAAC,OAA5C;AAAoD,UAAA,OAAO,EAAC,UAA5D;AAAuE,UAAA,SAAS,EAAC,MAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAVD;AAAA;AAAA;AAAA;AAAA;AAAA,YAPD,EAwBEW,KAAK,CAACiC,MAAN,GAAe,CAAf,gBACA,QAAC,WAAD;AAAa,MAAA,SAAS,EAAEtC,QAAQ,CAACT,YAAjC;AAAA,6BACC,QAAC,MAAD;AAAQ,QAAA,SAAS,eAAE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAAnB;AAAoC,QAAA,IAAI,EAAC,OAAzC;AAAiD,QAAA,OAAO,EAAC,UAAzD;AAAoE,QAAA,KAAK,EAAC,SAA1E;AAAoF,QAAA,IAAI,EAAC,QAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADA,GAMG,IA9BL,eAgCC,QAAC,UAAD;AAAY,MAAA,SAAS,EAAES,QAAQ,CAACT,YAAhC;AAA8C,MAAA,YAAY,MAA1D;AAAA,gBACEc,KAAK,CAACiC,MAAN,GAAe,CAAf,GAAoB,mBAAkBjC,KAAK,CAACiC,MAAO,IAAnD,GAAyD;AAD3D;AAAA;AAAA;AAAA;AAAA,YAhCD,EAmCEjC,KAAK,CAACiC,MAAN,GAAe,CAAf,gBACA,QAAC,cAAD;AAAgB,MAAA,SAAS,EAAEtC,QAAQ,CAACT,YAApC;AAAA,6BACC,QAAC,KAAD;AAAO,QAAA,SAAS,EAAEU,OAAO,CAAClB,KAA1B;AAAiC,sBAAW,cAA5C;AAAA,gCACC,QAAC,SAAD;AAAA,iCACC,QAAC,QAAD;AAAA,oCACC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,eAGC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHD,eAIC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBADD,eASC,QAAC,SAAD;AAAA,oBACEsB,KAAK,CAACyD,GAAN,CAAU,CAAC3F,IAAD,EAAOuF,KAAP,KAAiB;AAC3B,gCACC,QAAC,QAAD;AAAA,sCACC,QAAC,SAAD;AAAA,0BAAYvF,IAAI,CAACkD;AAAjB;AAAA;AAAA;AAAA;AAAA,sBADD,eAEC,QAAC,SAAD;AAAA,0BAAYlD,IAAI,CAACsD;AAAjB;AAAA;AAAA;AAAA;AAAA,sBAFD,eAGC,QAAC,SAAD;AAAA,0BAAYxD,gBAAgB,CAACE,IAAI,CAAC4D,IAAN,EAAY,CAAZ;AAA5B;AAAA;AAAA;AAAA;AAAA,sBAHD,eAIC,QAAC,SAAD;AAAA,uCACC,QAAC,MAAD;AACC,kBAAA,OAAO,EAAC,UADT;AAEC,kBAAA,IAAI,EAAC,QAFN;AAGC,kBAAA,OAAO,EAAErB,KAAK,IAAI+C,UAAU,CAAC/C,KAAD,EAAQgD,KAAR,CAH7B;AAIC,kBAAA,QAAQ,EAAEnD,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBAJD;AAAA,eAAemD,KAAf;AAAA;AAAA;AAAA;AAAA,oBADD;AAiBA,WAlBA;AADF;AAAA;AAAA;AAAA;AAAA,gBATD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADA,GAkCG,IArEL;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAyEA,CApOD;;GAAM7D,gB;UAEWf,S;;;KAFXe,gB;AAsON,eAAeA,gBAAf","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@mui/material/styles';\nimport { Button, Grid, Divider, FormLabel, FormControlLabel } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport Swal from 'sweetalert2';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport { green, red, blue } from '@mui/material/colors';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@mui/material/Tooltip';\nimport FormControl from '@mui/material/FormControl';\nimport { Save, Attachment } from \"@mui/icons-material\";\n\nimport PublishIcon from '@material-ui/icons/Publish';\nimport FileProvider from '../providers/file.provider';\nimport { checkFileMIMEType, checkFileSize, getFormattedSize } from '../helpers/files.helper';\n\nconst blobToBase64 = async file =>\n\tnew Promise((resolve, reject) => {\n\t\tconst reader = new FileReader();\n\t\treader.readAsDataURL(file);\n\t\treader.onload = () => resolve(reader.result);\n\t\treader.onerror = error => reject(error);\n\t});\n\nconst useStyles = makeStyles({\n\ttable: {\n\t\tminWidth: 650\n\t}\n});\n\nconst styles2 = makeStyles(theme => ({\n\ticons: {\n\t\tfontSize: 'small',\n\t\tbackgroundColor: red[500],\n\t\tcolor: red[500]\n\t},\n\n\tformControl2: {\n\t\tminWidth: 300,\n\t\tpadding: theme.spacing(1)\n\t},\n\n\tinput: {\n\t\tdisplay: 'none'\n\t},\n\n\tformControl1: {\n\t\tminWidth: 100,\n\t\tpadding: theme.spacing(1)\n\t}\n}));\n\nconst SellerStoreFiles = ({ skus, idcliente }) => {\n\tconst classes2 = styles2();\n\tconst classes = useStyles();\n\n\tconst MAXIMUM_FILES_LIMIT = 5;\n\t/**\n\t * Size in MB\n\t */\n\tconst MAXIMUM_FILE_SIZE = 2;\n\tconst ALLOWED_FORMATS = '.pdf, .doc, .docx, .odt, image/*';\n\n\tconst [files, setFiles] = useState([]);\n\t// const [refId, setRefId] = useState(idcliente);\n\t// const [skur, setSku] = useState('');\n\n\tconst [submitting, setSubmitting] = useState(false);\n\n\tconst getCurrentFiles = async event => {\n\t\tconst rawFiles = event.target.files;\n\t\tconst fileList = []; // WIll contain an array of type File[]\n\t\tif (!rawFiles) {\n\t\t\treturn;\n\t\t}\n\t\tif (rawFiles instanceof Array) {\n\t\t\trawFiles.forEach(file => fileList.push(file));\n\t\t} else {\n\t\t\tconst rawFilesArray = Array.from(rawFiles);\n\t\t\trawFilesArray.forEach(file => fileList.push(file));\n\t\t}\n\t\tconst finalFileList = [];\n\t\tfor (const file of fileList) {\n\t\t\tconst extensionSeparatorIndex = file.name.lastIndexOf('.');\n\t\t\tconst formattedName = file.name.substring(0, extensionSeparatorIndex);\n\t\t\tconst extension = file.name.substr(extensionSeparatorIndex);\n\t\t\tconst encodedData = await blobToBase64(file);\n\t\t\tconst formattedFile = {\n\t\t\t\tname: formattedName,\n\t\t\t\textension,\n\t\t\t\tfile: encodedData?.toString() ?? '',\n\t\t\t\ttype: 'append',\n\t\t\t\tsize: file.size\n\t\t\t};\n\t\t\tif (files.find(appendedFile => appendedFile.name === formattedFile.name)) {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ticon: 'info',\n\t\t\t\t\ttitle: `The file ${formattedFile.name + formattedFile.extension} is already added`\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!checkFileMIMEType(file.type, ALLOWED_FORMATS)) {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ticon: 'warning',\n\t\t\t\t\ttitle: 'Please select another file (Supported formats: images and PDF)',\n\t\t\t\t\thtml: `<small class=\"text-muted\">The file ${file.name} is not supported</small>`\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!checkFileSize(file.size, MAXIMUM_FILE_SIZE)) {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ticon: 'warning',\n\t\t\t\t\ttitle: `The maximum file size is ${MAXIMUM_FILE_SIZE}MB`,\n\t\t\t\t\thtml: `<small class=\"text-muted\">The file ${file.name} have a size of ${getFormattedSize(\n\t\t\t\t\t\tfile.size,\n\t\t\t\t\t\t2\n\t\t\t\t\t)}</small>`\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (files.length < MAXIMUM_FILES_LIMIT) {\n\t\t\t\tfinalFileList.push(formattedFile);\n\t\t\t} else {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ticon: 'info',\n\t\t\t\t\ttitle: `The maximum file quantity to upload is ${MAXIMUM_FILES_LIMIT}`\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (finalFileList.length > 0) {\n\t\t\tsetFiles([...files, ...finalFileList]);\n\t\t}\n\t\tevent.target.value = event.target.defaultValue; // Reset input cached value\n\t};\n\n\t/* const handleRefIdChange = (event) => {\n\t\t if (event.isTrusted) {\n\t\t\t setRefId(event.target.value)\n\t\t }\n\t } \n \n\t const handleSkuChange = (event) => {\n\t\t if (event.isTrusted) {\n\t\t\t setSku(event.target.value);\n\t\t }\n\t }v */\n\n\tconst handleFilesSubmit = async event => {\n\t\tevent.preventDefault();\n\t\tif (event.isTrusted && skus !== '') {\n\t\t\tconst proceed = await Swal.fire({\n\t\t\t\ttitle: 'The files will be uploaded to the S3 bucket. Proceed?',\n\t\t\t\ttext: `The destination directory is /${idcliente}/${skus}`,\n\t\t\t\ticon: 'question',\n\t\t\t\tconfirmButtonText: 'Yes',\n\t\t\t\tcancelButtonText: 'No. Abort action',\n\t\t\t\tshowCancelButton: true\n\t\t\t});\n\t\t\tif (!proceed?.isConfirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetSubmitting(true);\n\t\t\ttry {\n\t\t\t\tconst response = (await new FileProvider().submitFiles(files, idcliente, skus)).data;\n\t\t\t\tif (response?.value?.fileUpload) {\n\t\t\t\t\tawait Swal.fire({\n\t\t\t\t\t\ttitle: `${files.length > 1 ? 'Files' : 'File'} uploaded successfully`,\n\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t});\n\t\t\t\t\tsetFiles([]);\n\t\t\t\t} else {\n\t\t\t\t\tawait Swal.fire({\n\t\t\t\t\t\ttitle: response.error.message ?? 'Unexpected error',\n\t\t\t\t\t\ticon: 'error'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (reason) {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttitle: 'Unexpected error',\n\t\t\t\t\ttext: 'Please try again later',\n\t\t\t\t\ticon: 'error'\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetSubmitting(false);\n\t\t\tevent.target.reset();\n\t\t} else {\n\t\t\tSwal.fire({\n\t\t\t\ttitle: 'Opps!!',\n\t\t\t\ttext: 'Please enter a valid SKU',\n\t\t\t\ticon: 'Warning'\n\t\t\t});\n\t\t}\n\t};\n\n\tconst removeFile = (event, index) => {\n\t\tif (event.isTrusted) {\n\t\t\tconst currentFiles = files;\n\t\t\tcurrentFiles.splice(index, 1);\n\t\t\tsetFiles([...currentFiles]);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdocument.title = 'S3 REST API w/ File Upload Example';\n\t}, []);\n\n\treturn (\n\t\t<form onSubmit={handleFilesSubmit}>\n\t\t\t<Typography variant=\"h6\" gutterBottom className={classes2.formControl2}>\n\t\t\t\tUpload Business and Legal Documents\n\t\t\t\t<Tooltip title=\"you can later upload documents or images of your product.\">\n\t\t\t\t\t<InfoIcon fontSize=\"small\" color=\"action\" />\n\t\t\t\t</Tooltip>\n\t\t\t</Typography>\n\t\t\t<FormControl className={classes2.formControl1}>\n\t\t\t\t<TextField\n\t\t\t\t\tid=\"file1\"\n\t\t\t\t\tname=\"file1\"\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\tonChange={getCurrentFiles}\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tclassName={classes2.input}\n\t\t\t\t\tmultiple\n\t\t\t\t/>\n\t\t\t\t<label htmlFor=\"file1\">\n\t\t\t\t\t<Button startIcon={<AttachmentIcon />} size=\"large\" variant=\"outlined\" component=\"span\">\n\t\t\t\t\t\tSelect File ...\n\t\t\t\t\t</Button>\n\t\t\t\t</label>\n\t\t\t</FormControl>\n\n\t\t\t{files.length > 0 ? (\n\t\t\t\t<FormControl className={classes2.formControl2}>\n\t\t\t\t\t<Button startIcon={<PublishIcon />} size=\"large\" variant=\"outlined\" color=\"primary\" type=\"submit\">\n\t\t\t\t\t\tUpload List\n\t\t\t\t\t</Button>\n\t\t\t\t</FormControl>\n\t\t\t) : null}\n\n\t\t\t<Typography className={classes2.formControl2} gutterBottom>\n\t\t\t\t{files.length > 0 ? `Files in queue (${files.length}):` : 'No files in queue yet'}\n\t\t\t</Typography>\n\t\t\t{files.length > 0 ? (\n\t\t\t\t<TableContainer className={classes2.formControl2}>\n\t\t\t\t\t<Table className={classes.table} aria-label=\"simple table\">\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableCell>File Name</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>File Extension</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>File Size</TableCell>\n\t\t\t\t\t\t\t\t<TableCell>Actions</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{files.map((file, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow key={index}>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{file.name}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{file.extension}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{getFormattedSize(file.size, 2)}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={event => removeFile(event, index)}\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={submitting}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tRemove\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t) : null}\n\t\t</form>\n\t);\n};\n\nexport default SellerStoreFiles;\n"]},"metadata":{},"sourceType":"module"}