{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/gsa_16/newgsa/src/views/application/kanban/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from 'react-redux'; // material-ui\n\nimport { Box } from '@mui/material'; // third-party\n\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'; // project imports\n\nimport Columns from './Columns';\nimport AddColumn from './AddColumn';\nimport ItemDetails from './ItemDetails';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { UPDATE_COLUMN_ORDER, UPDATE_COLUMN_ITEM_ORDER } from 'store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDragWrapper = isDraggingOver => ({\n  p: 1,\n  bgcolor: isDraggingOver ? 'primary.200' : 'transparent',\n  display: 'flex',\n  overflow: 'auto'\n}); // ==============================|| KANBAN - BOARD ||============================== //\n\n\nconst Board = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const kanban = useSelector(state => state.kanban);\n  const {\n    columns,\n    columnsOrder\n  } = kanban; // handle drag & drop\n\n  const onDragEnd = result => {\n    let newColumn;\n    const {\n      source,\n      destination,\n      draggableId,\n      type\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'column') {\n      const newColumnsOrder = Array.from(columnsOrder);\n      newColumnsOrder.splice(source.index, 1); // remove dragged column\n\n      newColumnsOrder.splice(destination === null || destination === void 0 ? void 0 : destination.index, 0, draggableId); // set column new position\n\n      dispatch({\n        type: UPDATE_COLUMN_ORDER,\n        payload: {\n          columnsOrder: newColumnsOrder\n        }\n      });\n      return;\n    } // find dragged item's column\n\n\n    const sourceColumn = columns.filter(item => item.id === source.droppableId)[0]; // find dropped item's column\n\n    const destinationColumn = columns.filter(item => item.id === destination.droppableId)[0]; // if - moving items in the same list\n    // else - moving items from one list to another\n\n    if (sourceColumn === destinationColumn) {\n      const newItemIds = Array.from(sourceColumn.itemIds); // remove the id of dragged item from its original position\n\n      newItemIds.splice(source.index, 1); // insert the id of dragged item to the new position\n\n      newItemIds.splice(destination.index, 0, draggableId); // updated column\n\n      const newSourceColumn = { ...sourceColumn,\n        itemIds: newItemIds\n      };\n      newColumn = columns.map(column => {\n        if (column.id === newSourceColumn.id) {\n          return newSourceColumn;\n        }\n\n        return column;\n      });\n    } else {\n      const newSourceItemIds = Array.from(sourceColumn.itemIds); // remove the id of dragged item from its original column\n\n      newSourceItemIds.splice(source.index, 1); // updated dragged items's column\n\n      const newSourceColumn = { ...sourceColumn,\n        itemIds: newSourceItemIds\n      };\n      const newDestinationItemIds = Array.from(destinationColumn.itemIds); // insert the id of dragged item to the new position in dropped column\n\n      newDestinationItemIds.splice(destination.index, 0, draggableId); // updated dropped item's column\n\n      const newDestinationColumn = { ...destinationColumn,\n        itemIds: newDestinationItemIds\n      };\n      newColumn = columns.map(column => {\n        if (column.id === newSourceColumn.id) {\n          return newSourceColumn;\n        }\n\n        if (column.id === newDestinationColumn.id) {\n          return newDestinationColumn;\n        }\n\n        return column;\n      });\n    }\n\n    dispatch({\n      type: UPDATE_COLUMN_ITEM_ORDER,\n      payload: {\n        columns: newColumn\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(MainCard, {\n          border: false,\n          ref: provided.innerRef,\n          contentSX: getDragWrapper(snapshot.isDraggingOver),\n          ...provided.droppableProps,\n          children: [columnsOrder.map((columnId, index) => {\n            const column = columns.filter(item => item.id === columnId)[0];\n            return /*#__PURE__*/_jsxDEV(Columns, {\n              column: column,\n              index: index\n            }, columnId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 40\n            }, this);\n          }), provided.placeholder, /*#__PURE__*/_jsxDEV(AddColumn, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ItemDetails, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"uj6cQP0CDmQTGAHI26WmZ1Qh2GY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/admin/Documents/gsa_16/newgsa/src/views/application/kanban/Board/index.js"],"names":["useDispatch","useSelector","Box","DragDropContext","Droppable","Columns","AddColumn","ItemDetails","MainCard","UPDATE_COLUMN_ORDER","UPDATE_COLUMN_ITEM_ORDER","getDragWrapper","isDraggingOver","p","bgcolor","display","overflow","Board","dispatch","kanban","state","columns","columnsOrder","onDragEnd","result","newColumn","source","destination","draggableId","type","droppableId","index","newColumnsOrder","Array","from","splice","payload","sourceColumn","filter","item","id","destinationColumn","newItemIds","itemIds","newSourceColumn","map","column","newSourceItemIds","newDestinationItemIds","newDestinationColumn","provided","snapshot","innerRef","droppableProps","columnId","placeholder"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { Box } from '@mui/material';\r\n\r\n// third-party\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\n// project imports\r\nimport Columns from './Columns';\r\nimport AddColumn from './AddColumn';\r\nimport ItemDetails from './ItemDetails';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { UPDATE_COLUMN_ORDER, UPDATE_COLUMN_ITEM_ORDER } from 'store/actions';\r\n\r\nconst getDragWrapper = (isDraggingOver) => ({\r\n    p: 1,\r\n    bgcolor: isDraggingOver ? 'primary.200' : 'transparent',\r\n    display: 'flex',\r\n    overflow: 'auto'\r\n});\r\n\r\n// ==============================|| KANBAN - BOARD ||============================== //\r\n\r\nconst Board = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const kanban = useSelector((state) => state.kanban);\r\n    const { columns, columnsOrder } = kanban;\r\n\r\n    // handle drag & drop\r\n    const onDragEnd = (result) => {\r\n        let newColumn;\r\n        const { source, destination, draggableId, type } = result;\r\n\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        if (type === 'column') {\r\n            const newColumnsOrder = Array.from(columnsOrder);\r\n\r\n            newColumnsOrder.splice(source.index, 1); // remove dragged column\r\n            newColumnsOrder.splice(destination?.index, 0, draggableId); // set column new position\r\n\r\n            dispatch({\r\n                type: UPDATE_COLUMN_ORDER,\r\n                payload: { columnsOrder: newColumnsOrder }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // find dragged item's column\r\n        const sourceColumn = columns.filter((item) => item.id === source.droppableId)[0];\r\n\r\n        // find dropped item's column\r\n        const destinationColumn = columns.filter((item) => item.id === destination.droppableId)[0];\r\n\r\n        // if - moving items in the same list\r\n        // else - moving items from one list to another\r\n        if (sourceColumn === destinationColumn) {\r\n            const newItemIds = Array.from(sourceColumn.itemIds);\r\n\r\n            // remove the id of dragged item from its original position\r\n            newItemIds.splice(source.index, 1);\r\n\r\n            // insert the id of dragged item to the new position\r\n            newItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated column\r\n            const newSourceColumn = {\r\n                ...sourceColumn,\r\n                itemIds: newItemIds\r\n            };\r\n\r\n            newColumn = columns.map((column) => {\r\n                if (column.id === newSourceColumn.id) {\r\n                    return newSourceColumn;\r\n                }\r\n                return column;\r\n            });\r\n        } else {\r\n            const newSourceItemIds = Array.from(sourceColumn.itemIds);\r\n\r\n            // remove the id of dragged item from its original column\r\n            newSourceItemIds.splice(source.index, 1);\r\n\r\n            // updated dragged items's column\r\n            const newSourceColumn = {\r\n                ...sourceColumn,\r\n                itemIds: newSourceItemIds\r\n            };\r\n\r\n            const newDestinationItemIds = Array.from(destinationColumn.itemIds);\r\n\r\n            // insert the id of dragged item to the new position in dropped column\r\n            newDestinationItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated dropped item's column\r\n            const newDestinationColumn = {\r\n                ...destinationColumn,\r\n                itemIds: newDestinationItemIds\r\n            };\r\n\r\n            newColumn = columns.map((column) => {\r\n                if (column.id === newSourceColumn.id) {\r\n                    return newSourceColumn;\r\n                }\r\n                if (column.id === newDestinationColumn.id) {\r\n                    return newDestinationColumn;\r\n                }\r\n                return column;\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type: UPDATE_COLUMN_ITEM_ORDER,\r\n            payload: {\r\n                columns: newColumn\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ display: 'flex' }}>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"columns\" direction=\"horizontal\" type=\"column\">\r\n                    {(provided, snapshot) => (\r\n                        <MainCard\r\n                            border={false}\r\n                            ref={provided.innerRef}\r\n                            contentSX={getDragWrapper(snapshot.isDraggingOver)}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {columnsOrder.map((columnId, index) => {\r\n                                const column = columns.filter((item) => item.id === columnId)[0];\r\n                                return <Columns key={columnId} column={column} index={index} />;\r\n                            })}\r\n                            {provided.placeholder}\r\n                            <AddColumn />\r\n                        </MainCard>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <ItemDetails />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}