{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/sistema_gsa/newgsa/src/views/application/kanban/Backlogs/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // material-ui\n\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material'; // third-party\n\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'; // project import\n\nimport AddStory from './AddStory';\nimport UserStory from './UserStory';\nimport ItemDetails from '../Board/ItemDetails';\nimport { UPDATE_STORY_ORDER, UPDATE_STORY_ITEM_ORDER } from 'store/actions'; // assets\n\nimport AddIcon from '@mui/icons-material/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getDropWrapper = (isDraggingOver, theme) => ({\n  background: isDraggingOver ? theme.palette.secondary.light + 50 : 'transparent'\n}); // ==============================|| KANBAN - BACKLOGS ||============================== //\n\n\nconst Backlogs = () => {\n  _s();\n\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const kanban = useSelector(state => state.kanban);\n  const {\n    userStory,\n    userStoryOrder\n  } = kanban;\n\n  const onDragEnd = result => {\n    let newUserStory;\n    const {\n      source,\n      destination,\n      draggableId,\n      type\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'user-story') {\n      const newUserStoryOrder = Array.from(userStoryOrder);\n      newUserStoryOrder.splice(source.index, 1); // remove dragged column\n\n      newUserStoryOrder.splice(destination === null || destination === void 0 ? void 0 : destination.index, 0, draggableId); // set column new position\n\n      dispatch({\n        type: UPDATE_STORY_ORDER,\n        payload: {\n          userStoryOrder: newUserStoryOrder\n        }\n      });\n      return;\n    } // find dragged item's column\n\n\n    const sourceUserStory = userStory.filter(story => story.id === source.droppableId)[0]; // find dropped item's column\n\n    const destinationUserStory = userStory.filter(story => story.id === destination.droppableId)[0]; // if - moving items in the same list\n    // else - moving items from one list to another\n\n    if (sourceUserStory === destinationUserStory) {\n      const newItemIds = Array.from(sourceUserStory.itemIds); // remove the id of dragged item from its original position\n\n      newItemIds.splice(source.index, 1); // insert the id of dragged item to the new position\n\n      newItemIds.splice(destination.index, 0, draggableId); // updated column\n\n      const newSourceUserStory = { ...sourceUserStory,\n        itemIds: newItemIds\n      };\n      newUserStory = userStory.map(story => {\n        if (story.id === newSourceUserStory.id) {\n          return newSourceUserStory;\n        }\n\n        return story;\n      });\n    } else {\n      const newSourceItemIds = Array.from(sourceUserStory.itemIds); // remove the id of dragged item from its original column\n\n      newSourceItemIds.splice(source.index, 1); // updated dragged items's column\n\n      const newSourceUserStory = { ...sourceUserStory,\n        itemIds: newSourceItemIds\n      };\n      const newDestinationItemIds = Array.from(destinationUserStory.itemIds); // insert the id of dragged item to the new position in dropped column\n\n      newDestinationItemIds.splice(destination.index, 0, draggableId); // updated dropped item's column\n\n      const newDestinationSourceUserStory = { ...destinationUserStory,\n        itemIds: newDestinationItemIds\n      };\n      newUserStory = userStory.map(story => {\n        if (story.id === newSourceUserStory.id) {\n          return newSourceUserStory;\n        }\n\n        if (story.id === newDestinationSourceUserStory.id) {\n          return newDestinationSourceUserStory;\n        }\n\n        return story;\n      });\n    }\n\n    dispatch({\n      type: UPDATE_STORY_ITEM_ORDER,\n      payload: {\n        userStory: newUserStory\n      }\n    });\n  }; // drawer\n\n\n  const [openDrawer, setOpenDrawer] = useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpenDrawer(prevState => !prevState);\n  };\n\n  const addStory = () => {\n    setOpenDrawer(prevState => !prevState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"user-story\",\n          type: \"user-story\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            \"aria-label\": \"collapsible table\",\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            sx: getDropWrapper(snapshot.isDraggingOver, theme),\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              sx: {\n                '& th,& td': {\n                  whiteSpace: 'nowrap'\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  sx: {\n                    pl: 3\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                    title: \"Add User Story\",\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\",\n                      size: \"small\",\n                      color: \"secondary\",\n                      onClick: addStory,\n                      endIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 156,\n                        columnNumber: 62\n                      }, this),\n                      children: \"ADD\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 151,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Id\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"State\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Assigned To\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Priority\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Due Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              sx: {\n                '& th,& td': {\n                  whiteSpace: 'nowrap'\n                }\n              },\n              children: [userStoryOrder.map((storyId, index) => {\n                const story = userStory.filter(item => item.id === storyId)[0];\n                return /*#__PURE__*/_jsxDEV(UserStory, {\n                  story: story,\n                  index: index\n                }, story.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 48\n                }, this);\n              }), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddStory, {\n        open: openDrawer,\n        handleDrawerOpen: handleDrawerOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ItemDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Backlogs, \"cRBi5akZuyP47h8dRlM8sE0uGZQ=\", false, function () {\n  return [useTheme, useDispatch, useSelector];\n});\n\n_c = Backlogs;\nexport default Backlogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Backlogs\");","map":{"version":3,"sources":["/Users/admin/Documents/sistema_gsa/newgsa/src/views/application/kanban/Backlogs/index.js"],"names":["useState","useDispatch","useSelector","useTheme","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Tooltip","DragDropContext","Droppable","AddStory","UserStory","ItemDetails","UPDATE_STORY_ORDER","UPDATE_STORY_ITEM_ORDER","AddIcon","getDropWrapper","isDraggingOver","theme","background","palette","secondary","light","Backlogs","dispatch","kanban","state","userStory","userStoryOrder","onDragEnd","result","newUserStory","source","destination","draggableId","type","droppableId","index","newUserStoryOrder","Array","from","splice","payload","sourceUserStory","filter","story","id","destinationUserStory","newItemIds","itemIds","newSourceUserStory","map","newSourceItemIds","newDestinationItemIds","newDestinationSourceUserStory","openDrawer","setOpenDrawer","handleDrawerOpen","prevState","addStory","provided","snapshot","droppableProps","innerRef","whiteSpace","pl","storyId","item","placeholder"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\n\r\n// third-party\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\n// project import\r\nimport AddStory from './AddStory';\r\nimport UserStory from './UserStory';\r\nimport ItemDetails from '../Board/ItemDetails';\r\nimport { UPDATE_STORY_ORDER, UPDATE_STORY_ITEM_ORDER } from 'store/actions';\r\n\r\n// assets\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst getDropWrapper = (isDraggingOver, theme) => ({\r\n    background: isDraggingOver ? theme.palette.secondary.light + 50 : 'transparent'\r\n});\r\n\r\n// ==============================|| KANBAN - BACKLOGS ||============================== //\r\n\r\nconst Backlogs = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const kanban = useSelector((state) => state.kanban);\r\n    const { userStory, userStoryOrder } = kanban;\r\n\r\n    const onDragEnd = (result) => {\r\n        let newUserStory;\r\n        const { source, destination, draggableId, type } = result;\r\n\r\n        if (!destination) return;\r\n\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        if (type === 'user-story') {\r\n            const newUserStoryOrder = Array.from(userStoryOrder);\r\n\r\n            newUserStoryOrder.splice(source.index, 1); // remove dragged column\r\n            newUserStoryOrder.splice(destination?.index, 0, draggableId); // set column new position\r\n\r\n            dispatch({\r\n                type: UPDATE_STORY_ORDER,\r\n                payload: { userStoryOrder: newUserStoryOrder }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // find dragged item's column\r\n        const sourceUserStory = userStory.filter((story) => story.id === source.droppableId)[0];\r\n\r\n        // find dropped item's column\r\n        const destinationUserStory = userStory.filter((story) => story.id === destination.droppableId)[0];\r\n\r\n        // if - moving items in the same list\r\n        // else - moving items from one list to another\r\n        if (sourceUserStory === destinationUserStory) {\r\n            const newItemIds = Array.from(sourceUserStory.itemIds);\r\n\r\n            // remove the id of dragged item from its original position\r\n            newItemIds.splice(source.index, 1);\r\n\r\n            // insert the id of dragged item to the new position\r\n            newItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated column\r\n            const newSourceUserStory = {\r\n                ...sourceUserStory,\r\n                itemIds: newItemIds\r\n            };\r\n\r\n            newUserStory = userStory.map((story) => {\r\n                if (story.id === newSourceUserStory.id) {\r\n                    return newSourceUserStory;\r\n                }\r\n                return story;\r\n            });\r\n        } else {\r\n            const newSourceItemIds = Array.from(sourceUserStory.itemIds);\r\n\r\n            // remove the id of dragged item from its original column\r\n            newSourceItemIds.splice(source.index, 1);\r\n\r\n            // updated dragged items's column\r\n            const newSourceUserStory = {\r\n                ...sourceUserStory,\r\n                itemIds: newSourceItemIds\r\n            };\r\n\r\n            const newDestinationItemIds = Array.from(destinationUserStory.itemIds);\r\n\r\n            // insert the id of dragged item to the new position in dropped column\r\n            newDestinationItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated dropped item's column\r\n            const newDestinationSourceUserStory = {\r\n                ...destinationUserStory,\r\n                itemIds: newDestinationItemIds\r\n            };\r\n\r\n            newUserStory = userStory.map((story) => {\r\n                if (story.id === newSourceUserStory.id) {\r\n                    return newSourceUserStory;\r\n                }\r\n                if (story.id === newDestinationSourceUserStory.id) {\r\n                    return newDestinationSourceUserStory;\r\n                }\r\n                return story;\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type: UPDATE_STORY_ITEM_ORDER,\r\n            payload: {\r\n                userStory: newUserStory\r\n            }\r\n        });\r\n    };\r\n\r\n    // drawer\r\n    const [openDrawer, setOpenDrawer] = useState(false);\r\n    const handleDrawerOpen = () => {\r\n        setOpenDrawer((prevState) => !prevState);\r\n    };\r\n\r\n    const addStory = () => {\r\n        setOpenDrawer((prevState) => !prevState);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TableContainer>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId=\"user-story\" type=\"user-story\">\r\n                        {(provided, snapshot) => (\r\n                            <Table\r\n                                size=\"small\"\r\n                                aria-label=\"collapsible table\"\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                sx={getDropWrapper(snapshot.isDraggingOver, theme)}\r\n                            >\r\n                                <TableHead sx={{ '& th,& td': { whiteSpace: 'nowrap' } }}>\r\n                                    <TableRow>\r\n                                        <TableCell sx={{ pl: 3 }}>\r\n                                            <Tooltip title=\"Add User Story\">\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    size=\"small\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={addStory}\r\n                                                    endIcon={<AddIcon />}\r\n                                                >\r\n                                                    ADD\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                        <TableCell>Id</TableCell>\r\n                                        <TableCell>Title</TableCell>\r\n                                        <TableCell />\r\n                                        <TableCell>State</TableCell>\r\n                                        <TableCell>Assigned To</TableCell>\r\n                                        <TableCell>Priority</TableCell>\r\n                                        <TableCell>Due Date</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody sx={{ '& th,& td': { whiteSpace: 'nowrap' } }}>\r\n                                    {userStoryOrder.map((storyId, index) => {\r\n                                        const story = userStory.filter((item) => item.id === storyId)[0];\r\n                                        return <UserStory key={story.id} story={story} index={index} />;\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                </TableBody>\r\n                            </Table>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                <AddStory open={openDrawer} handleDrawerOpen={handleDrawerOpen} />\r\n                <ItemDetails />\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Backlogs;\r\n"]},"metadata":{},"sourceType":"module"}